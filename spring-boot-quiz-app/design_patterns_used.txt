1.Model-View-Controller (MVC) Pattern: This pattern separates the application into three components: model (data), view (user interface), 
and controller (handles user input and updates the model and view). In a quiz application, the model would contain the quiz questions and
answers, the view would display the questions and receive user input, and the controller would handle user input and update the model and 
view accordingly.

*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** 
# GRASP Principles:
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** 

1.Creator : The QuizService class follows the Creator principle, as it is responsible for creating and providing Question objects to the MainController.
The QuizService class creates a new instance of the QuestionForm class and populates it with questions from the database. It follows the Creator pattern from 
GRASP, where a class is responsible for creating new instances of other classes

2.Information Expert: The Question class holds the data for a single question in the quiz. 
It follows the Information Expert pattern from GRASP, where the object with the most information about a particular concept is responsible for that concept

3.Controller: The MainController class follows the Controller pattern by acting as a central point for handling incoming requests and
delegating the necessary tasks to other classes.

4.Low Coupling: The MainController class communicates with the QuizService class through method calls and does not depend on the specific implementation of 
the service. It follows the Low Coupling pattern from GRASP, where objects should minimize their dependencies on other objects

5.High Cohesion: The QuizService class has methods that are related to the same responsibility (manipulating questions and results). It follows the High 
Cohesion pattern from GRASP, where objects should have a single, well-defined responsibility.

6.Indirection: The QuizService class interacts with the QuestionRepo and ResultRepo classes through their respective interfaces rather than directly. 
It follows the Indirection pattern from GRASP, where objects should interact with other objects through abstract interfaces rather than concrete implementations.


*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** 
# SOLID Principles:
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** 

1.Single Responsibility Principle (SRP): The MainController class is responsible for handling HTTP requests and managing the quiz flow, 
the QuizService class manages the quiz logic, and the Question class represents the question entity.Each one of these have ONLY ONE reason to change.

2.Dependency Inversion Principle (DIP): The code uses dependency injection via the @Autowired annotation to invert the control of object creation 
and management from the class to the Spring framework. This allows the code to be more flexible and maintainable.The dependency inversion principle states 
that high-level modules should depend on abstractions rather than low-level modules. 

3.Open/Closed Principle (OCP): The application seems to be open for extension, and new functionality can be added without modifying the existing code. 
For example, new questions can be added by inserting them into the database, and the QuizService class can be extended to support new types of quizzes


*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** 
DESIGN PATTERNS USED :
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** 


Factory Method: The getQuestions() method in the QuizService class can be considered an implementation of the Factory Method pattern. It creates a new QuestionForm object and sets its questions property to a list of Question objects obtained from the QuestionRepo. The QuestionForm object is then returned to the caller. This pattern allows the QuizService class to encapsulate the creation of QuestionForm objects, making it easier to change the implementation details in the future.


Builder Pattern: The getQuestions() method in the QuizService class uses the Builder pattern to create a QuestionForm object. It first retrieves all questions from the database, selects a random subset of five questions, and then adds them to a new QuestionForm object. By using the Builder pattern, the code can create QuestionForm objects in a flexible and extensible way, making it easier to modify the selection algorithm or add new features in the future.
